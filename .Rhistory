# # dd = raster::calc(subset(survival_brick, subset = (x - lookback + 1):x), mean)
# # plot(dd)
# #
# #
# # # # Kill and survival in separate panels -----
# # # {
# # #     get_pine_gg = function(kill_year, sz = 0.01, alph = 0.5, legend = F)
# # #   {
# # #     dtt = data.table(as.data.frame(subset(pine_brick, which(grepl((kill_year + 1), names(pine_brick)))), xy = T, na.rm = T))
# # #     names(dtt)[3] = "kill"
# # #     dtt = dtt[kill > 0, ]
# # #     dtt = dtt[kill > 0.5, ]
# # #     dtt[kill < 1, ]
# # #     dtt[, kill1 := sapply(kill, function(x) max(1, x))]
# # #     dtt[, kill1 := sapply(kill, function(x) min(x, 16000))]
# # #     dtt[, kill_log := log(kill1)]; #dtt[, summary(kill_log)]
# # #     return (  geom_point(data = dtt, aes(x, y, color = kill_log), size = sz, alpha = alph, show.legend = legend))
# # #   }
# # #   # Grobs of kill plots ----
# # #   get_kill_grob = function(kill_year)
# # #   {
# # #     ggplot() + gg_lat_lon + get_pine_gg(kill_year) + states_poly_gray_1 +
# # #       t1 + coords_square_panel +
# # #       guide_colorbar_below_pine_sum +
# # #       scale_color_pine_3
# # #     # scale_color_pine_2
# # #   }
# # #
# # #   get_kill_grob_2 = function(kill_year, colors = heat.colors(10)[-10], legend = F)
# # #   {
# # #     ggplot() + gg_lat_lon + get_pine_gg(kill_year, legend = legend) + states_poly_gray_1 +
# # #       t1 + coords_square_panel +
# # #       guide_colorbar_below_pine_sum +
# # #       scale_color_gradientn(
# # #         colours = colors,
# # #         na.value = rgb(0, 0, 0, 0),
# # #         breaks = log(breaks_pine_2k),
# # #         labels = breaks_pine_2k)
# # #
# # #     # scale_color_pine_2
# # #   }
# # #
# # #   # gplot objects for various survival years
# # #   surv_layers = 1998:2009
# # #
# # #   # Grobs of survival ----
# # #   surv_grobs = lapply(
# # #     which(daymet_years %in% surv_layers),
# # #     function(x) gplot(subset(survival_brick, x), maxpixels = maxpixels) +
# # #       gg_lat_lon + g_rast_no_legend + states_poly_gray_1 +
# # #       t1 + coords_square_panel + scale_fill_surv)
# # #   names(surv_grobs) = as.character(surv_layers)
# # #   surv_grobs_legend = lapply(
# # #     which(daymet_years %in% surv_layers),
# # #     function(x) gplot(subset(survival_brick, x), maxpixels = maxpixels) +
# # #       gg_lat_lon + g_rast_legend + states_poly_gray_1 +
# # #       t1 + coords_square_panel + scale_fill_surv)
# # #   names(surv_grobs_legend) = as.character(surv_layers)
# # #
# # #
# # #   kill_grobs = lapply(kill_years - 1, get_kill_grob)
# # #   names(kill_grobs) = as.character(kill_years)
# # #
# # #   plot_year = 2001
# # #
# # #   kill_grobs[[as.character(plot_year)]]
# # #   kill_grobs[[as.character(plot_year + 1)]]
# # #
# # #   ggplot() + gg_lat_lon + get_pine_gg(2000) + coords_square_panel
# # #   ggplot() + gg_lat_lon + get_pine_gg(2001) + coords_square_panel
# # #
# # #   kill_row =
# # #     (
# # #       ggplotGrob(get_kill_grob_2(plot_year, colors = rainbow(10)[-c(1:2)], legend = T) + theme(legend.position = "bottom") + ggtitle(plot_year)),
# # #       ggplotGrob(get_kill_grob_2(plot_year + 1, colors = rainbow(10)[-c(1:2)], legend = T) + theme(legend.position = "bottom") + ggtitle(plot_year + 1)),
# # #       ggplotGrob(get_kill_grob_2(plot_year + 2, colors = rainbow(10)[-c(1:2)], legend = T) + theme(legend.position = "bottom") + ggtitle(plot_year + 2)),
# # #       # ggplotGrob(kill_grobs[[as.character(plot_year)]] + ggtitle(plot_year)),
# # #       # ggplotGrob(kill_grobs[[as.character(plot_year + 1)]] + ggtitle(plot_year + 1)),
# # #       # ggplotGrob(kill_grobs[[as.character(plot_year + 2)]] + ggtitle(plot_year + 2)),
# # #       size = "first"
# # #     )
# # #
# # #   grid.draw(kill_row)
# # #
# # #   surv_row =
# # #     (
# # #       ggplotGrob(surv_grobs[[as.character(plot_year)]]),
# # #       ggplotGrob(surv_grobs[[as.character(plot_year + 1)]]),
# # #       ggplotGrob(surv_grobs[[as.character(plot_year + 2)]]),
# # #       size = "first"
# # #     )
# # #   surv_row =
# # #     (
# # #       ggplotGrob(surv_grobs_legend[[as.character(plot_year)]] + theme(legend.position = "bottom") ),
# # #       ggplotGrob(surv_grobs_legend[[as.character(plot_year + 1)]] + theme(legend.position = "bottom") ),
# # #       ggplotGrob(surv_grobs_legend[[as.character(plot_year + 2)]] + theme(legend.position = "bottom") ),
# # #       size = "first"
# # #     )
# # #
# # #
# # #   grid.draw(kill_row)
# # #   grid.draw(surv_row)
# # #
# # #   grid.draw(rbind(kill_row, surv_row, size = "first"))
# # #
# # #   png(width = 1800, height = 1300, file = "figures/kill_surv_rows.png")
# # #   grid.draw(rbind(kill_row, surv_row, size = "first"))
# # #   dev.off()
# # #
# # #
# # # }
# # #
# # #
# # #
# # #
# # # # Year 2000 maps -------------------------------
# # # {
# # #   pine_red_stage_year = 2001;
# # #   pine_kill_year = pine_red_stage_year - 1
# # #
# # #   # red-stage in 2000, kill from previous summer.
# # #   pine_layer = which(kill_years == pine_red_stage_year)
# # #   surv_layer = which(daymet_years == pine_kill_year)
# # #
# # #   plot(subset(pine_brick, pine_layer))
# # #   plot(subset(survival_brick, surv_layer))
# # #
# # #   pine_2k = subset(pine_brick, pine_layer)
# # #   pine_2k[pine_2k[] == 0] = NA
# # #
# # #   # This already has NA values outside the mask
# # #   surv_2k = subset(survival_brick, surv_layer)
# # #
# # #
# # #
# # #
# # #
# # #
# # #   gp_surv[[as.character(surv_year)]] + g_rast
# # #
# # #   gp_surv
# # #
# # #   surv_year = 2006
# # #
# # #   which(daymet_years %in% surv_year)
# # #
# # #   surv_2k = subset(survival_brick, surv_layer)
# # #   gplot_surv_2k = gplot(surv_2k, maxpixels = maxpixels)
# # #
# # #   # I can'f figure out how to overplot one raster on top of another with a different color scale,
# # #   # so use a hack of converting the pine to a data frame and plot with a square-shaped point
# # #   pine_2k_df = data.table(raster::as.data.frame(pine_2k, xy = T))
# # #   names(pine_2k_df)[3] = "kill"
# # #
# # #   pine_kill_year
# # #
# # #   dtt = data.table(as.data.frame(subset(pine_brick, which(grepl((pine_kill_year + 1), names(pine_brick)))), xy = T, na.rm = T))
# # #   names(dtt)[3] = "dat"
# # #   dtt = dtt[dat > 0, ]
# # #
# # #   data.table(as.data.frame((pine_kill_year + 1) %in% names(pine_brick), xy = T))
# # #   pine_brick
# # #   data.table(as.data.frame(pine_brick, xy = T))
# # #
# # #
# # #
# # #
# # #
# # #   # eliminate the NAs and the zeroes (they cause problems with the log scaling below)
# # #   pine_2k_df = pine_2k_df[complete.cases(pine_2k_df),,]
# # #   pine_2k_df = pine_2k_df[kill > 1]
# # #
# # #   # new scale and breaks needed
# # #   boxplot(pine_2k_df$kill)
# # #   summary(pine_2k_df$kill)
# # #   breaks_pine_2k = c(2, 10, 100, 1000, 16000)
# # #
# # #   gplot_surv_2k = gplot(surv_2k, maxpixels = maxpixels)
# # #   ggplot_pine_2k = ggplot(pine_2k_df, aes(x, y, color = kill))
# # #
# # #   # Legend color bar options:
# # #   leg_tit_surv = "% MPB overwinter survival"
# # #   leg_tit_pine_2k = "MPB pine mortality"
# # #
# # #
# # #   scale_color_pine = scale_color_gradientn(
# # #     colours = cols_pine_2, na.value = rgb(0, 0, 0, 0),
# # #     breaks = breaks_pine_2k, labels = breaks_pine_2k, trans = "log")
# # #
# # #   scale_color_pine = scale_color_gradientn(
# # #     colours = cols_pine_2, na.value = rgb(0, 0, 0, 0), trans = "log")
# # #
# # #   breaks_pine_2k = c(1, 10, 100, 1000, 16000)
# # #   log(breaks_pine_2k)
# # #
# # #   pine_kill_max = 1.6e4
# # #
# # #   year = 2000
# # #   dtt = data.table(as.data.frame(subset(pine_brick, which(grepl((year + 1), names(pine_brick)))), xy = T, na.rm = T))
# # #   names(dtt)[3] = "kill"
# # #   dtt = dtt[kill > 0, ]; dtt[, summary(kill)]
# # #   dtt = dtt[kill > 0.5, ]; dtt[, summary(kill)]
# # #   dtt[kill < 1, ]
# # #   dtt[, kill1 := sapply(kill, function(x) max(1, x))]
# # #   dtt[, kill_log := log(kill1)]; dtt[, summary(kill_log)]
# # #
# # #   ggplot() +
# # #     states_poly_gray_1 +
# # #     geom_point(data = dtt, aes(x, y, color = kill_log), size = 0.01, alpha = 0.5) +
# # #     scale_color_gradientn(
# # #       colours = cols_pine_2, na.value = rgb(0, 0, 0, 0),
# # #       breaks = log(breaks_pine_2k), labels = breaks_pine_2k)
# # #
# # #
# # #   map_scale = 1
# # #
# # #   gd_1 =  guides(
# # #     color = guide_colourbar(
# # #       title = leg_tit_pine_2k,
# # #       title.position = "bottom",
# # #       title.hjust = 0.5,
# # #       barheight = 1,
# # #       barwidth = 5))
# # #
# # #
# # #
# # #   # ,
# # #   # label.position = "top"))
# # #
# # #
# # #
# # #   ggplot() + t1 + coord_equal(xlim = c(-2e6, 0.2e6), ylim = c(-1.2e6, 1e6)) +
# # #     guide_colorbar_below_pine_sum + scg_1 +
# # #     get_pine_gg(2001) + states_poly_gray_1 + gg_lat_lon
# # #
# # #
# # #   ggplot_pine_surv = function(
# # #     # surv_year = 2006,
# # #     # pine_kill_year = 2000,
# # #     year = 2000,
# # #     map_scale, bar_scale = 3,
# # #     marg = 25,
# # #     legend_bar_base_height = 1.5, legend_bar_base_width = 18,
# # #     point_size = 0.01,
# # #     point_alpha = 0.5)
# # #   {
# # #     dtt = data.table(as.data.frame(subset(pine_brick, which(grepl((year + 1), names(pine_brick)))), xy = T, na.rm = T))
# # #     names(dtt)[3] = "kill"
# # #     dtt = dtt[kill > 0, ]
# # #
# # #     surv_grobs[[as.character(year)]] +
# # #       # gplot_surv_2k +
# # #       g_rast_no_legend + scale_fill_surv + # coord_fixed() +
# # #       states_poly_gray_1 +
# # #       # geom_point(data = pine_2k_df, aes(x, y, color = kill), size = point_size, alpha = point_alpha) +
# # #       geom_point(data = dtt, aes(x, y, color = kill), size = point_size, alpha = point_alpha) +
# # #       scale_color_pine +
# # #       scaled_theme(map_scale, marg) +
# # #       guides(
# # #         fill = guide_colourbar(
# # #           title = leg_tit_surv,
# # #           title.position = "bottom",
# # #           title.hjust = 0.5,
# # #           barheight = map_scale * legend_bar_base_height / bar_scale,
# # #           barwidth = map_scale * legend_bar_base_width / bar_scale,
# # #           label.position = "top"),
# # #         color = guide_colourbar(
# # #           title = leg_tit_pine_2k,
# # #           title.position = "bottom",
# # #           title.hjust = 0.5,
# # #           barheight = map_scale * legend_bar_base_height / bar_scale,
# # #           barwidth = map_scale * legend_bar_base_width / bar_scale,
# # #           label.position = "top")) +
# # #       ggtitle(year)
# # #   }
# # # }
# # #
# # # ggplot_pine_surv(map_scale = 1, year = 2000)
# # #
# # #
# # # png(height = 700, width = 600, file = "figures/overplot_example.png")
# # # ggplot_pine_surv(map_scale = 1, year = 2000)
# # # dev.off()
# #
# Plot params -----
{
# Which years to show in the individual year plots
surv_panel_years = as.character(c(2000, 2001, 2002))
# Which year to show in the multi-year mean plot
mean_surv_panel_year = 2002
lon_lat_col = gray(0.8, 0.4)
pine_point_size = 1.2
# sets resolution for plotting the survival, use low value for faster speed
maxpixels = 1e7
max_kill = 1000
lookback = 10
g_rast_legend = geom_raster(aes(fill = value), show.legend = T)
g_rast_no_legend = geom_raster(aes(fill = value), show.legend = F)
# legend.margin = margin(0, 15, 0, 15)
# legend.box.margin = margin(-25, 40, 0, 40)
# legend_bar_base_width = 18
# legend_bar_base_height = 1.5
t1 = theme(axis.text = element_blank(), axis.ticks = element_blank(),
panel.grid = element_blank(), panel.background = element_blank(),
panel.border = element_rect(fill = NA),
panel.border = element_blank(),
axis.title = element_blank())
coords_square_panel = coord_equal(xlim = c(-2e6, 1e5), ylim = c(-1.1e6, 0.85e6), ratio = 1)
breaks_pine_2k = c(2, 10, 100, 1000)
breaks_surv = seq(0, 1, len = 6)
labels_surv = paste0(100 * breaks_surv, "")
n_cols = 20
color_length = 1000
color_pow = 0.99
truncate_pct = 0.075
# Create a color ramp that has more colors at the bottom of the range
n_truncate = round(truncate_pct * color_length)
x = log(1:n_cols) / log(n_cols)
x = ((1:n_cols) ^ color_pow) / (n_cols ^ color_pow)
indices = round(color_length * x)
indices = rev(round(color_length * x))
colours = rev(colorRampPalette(c(rgb(0.1, 0.1, 1), rgb(0.5, 0, 0.5), rgb(1, 0, 0)))(color_length)[indices])
scale_pine_red_blue = scale_color_gradientn(
colours = colours,
na.value = rgb(0, 0, 0, 0),
breaks = log(breaks_pine_2k),
labels = breaks_pine_2k)
colours = rev(heat.colors(color_length + n_truncate))[-c(1:n_truncate)][sort(unique(indices))]
scale_pine_heat  = scale_color_gradientn(
colours = colours,
na.value = rgb(0, 0, 0, 0),
breaks = log(breaks_pine_2k),
labels = breaks_pine_2k)
cols_surv = terrain.colors(10)[-c(5:7)]
scale_fill_surv = scale_fill_gradientn(
colours = cols_surv,
na.value = rgb(0, 0, 0, 0),
breaks = breaks_surv,
labels = labels_surv)
scale_col_surv = scale_color_gradientn(
colours = cols_surv,
na.value = rgb(0, 0, 0, 0),
breaks = breaks_surv,
labels = labels_surv)
}
# Plot params -----
{
# Which years to show in the individual year plots
surv_panel_years = as.character(c(2000, 2001, 2002))
# Which year to show in the multi-year mean plot
mean_surv_panel_year = 2002
lon_lat_col = gray(0.8, 0.4)
pine_point_size = 1.2
# sets resolution for plotting the survival, use low value for faster speed
maxpixels = 1e7
max_kill = 1000
lookback = 10
g_rast_legend = geom_raster(aes(fill = value), show.legend = T)
g_rast_no_legend = geom_raster(aes(fill = value), show.legend = F)
# legend.margin = margin(0, 15, 0, 15)
# legend.box.margin = margin(-25, 40, 0, 40)
# legend_bar_base_width = 18
# legend_bar_base_height = 1.5
t1 = theme(axis.text = element_blank(), axis.ticks = element_blank(),
panel.grid = element_blank(), panel.background = element_blank(),
panel.border = element_rect(fill = NA),
# panel.border = element_blank(),
axis.title = element_blank())
coords_square_panel = coord_equal(xlim = c(-2e6, 1e5), ylim = c(-1.1e6, 0.85e6), ratio = 1)
breaks_pine_2k = c(2, 10, 100, 1000)
breaks_surv = seq(0, 1, len = 6)
labels_surv = paste0(100 * breaks_surv, "")
n_cols = 20
color_length = 1000
color_pow = 0.99
truncate_pct = 0.075
# Create a color ramp that has more colors at the bottom of the range
n_truncate = round(truncate_pct * color_length)
x = log(1:n_cols) / log(n_cols)
x = ((1:n_cols) ^ color_pow) / (n_cols ^ color_pow)
indices = round(color_length * x)
indices = rev(round(color_length * x))
colours = rev(colorRampPalette(c(rgb(0.1, 0.1, 1), rgb(0.5, 0, 0.5), rgb(1, 0, 0)))(color_length)[indices])
scale_pine_red_blue = scale_color_gradientn(
colours = colours,
na.value = rgb(0, 0, 0, 0),
breaks = log(breaks_pine_2k),
labels = breaks_pine_2k)
colours = rev(heat.colors(color_length + n_truncate))[-c(1:n_truncate)][sort(unique(indices))]
scale_pine_heat  = scale_color_gradientn(
colours = colours,
na.value = rgb(0, 0, 0, 0),
breaks = log(breaks_pine_2k),
labels = breaks_pine_2k)
cols_surv = terrain.colors(10)[-c(5:7)]
scale_fill_surv = scale_fill_gradientn(
colours = cols_surv,
na.value = rgb(0, 0, 0, 0),
breaks = breaks_surv,
labels = labels_surv)
scale_col_surv = scale_color_gradientn(
colours = cols_surv,
na.value = rgb(0, 0, 0, 0),
breaks = breaks_surv,
labels = labels_surv)
}
# legends ----
{
leg_band_data = data.table(kill = seq(0, log(max_kill), len = 1000), surv = seq(0, 1, len = 1000), y = 1)
legend_band_width = 15
legend_aspect_ratio = 0.5
coord_leg = coord_equal(ratio = legend_aspect_ratio)
t_leg = theme(
panel.background = element_blank(),
axis.line.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
axis.ticks.x = element_blank()
)
line_leg = geom_line(size = legend_band_width, show.legend = F)
sc_y_leg = scale_y_continuous(expand = c(0, 0), limits = c(0.9, 1.1))
leg_kill_gg_heat = ggplot(leg_band_data, aes(x = kill, y = y, color = kill)) +
line_leg + t_leg + sc_y_leg +
coord_equal(ratio = legend_aspect_ratio * (max(leg_band_data$kill) - min(leg_band_data$kill))) +
scale_pine_heat +
scale_x_continuous(breaks = log(breaks_pine_2k), labels = breaks_pine_2k) +
xlab("Pines killed per hectare")
leg_kill_gg_red_blue = ggplot(leg_band_data, aes(x = kill, y = y, color = kill)) +
line_leg + t_leg + sc_y_leg +
coord_equal(ratio = legend_aspect_ratio * (max(leg_band_data$kill) - min(leg_band_data$kill))) +
scale_pine_red_blue +
scale_x_continuous(breaks = log(breaks_pine_2k), labels = breaks_pine_2k) +
xlab("Pines killed per hectare")
leg_surv_gg = ggplot(leg_band_data, aes(x = surv, y = y, color = surv)) +
line_leg + t_leg + sc_y_leg +
coord_equal(ratio = legend_aspect_ratio * (max(leg_band_data$surv) - min(leg_band_data$surv))) +
scale_col_surv +
scale_x_continuous(breaks = breaks_surv, labels = 100 * breaks_surv) +
xlab("MPB Survival Percent")
# legend_row = cbind(ggplotGrob(leg_kill_gg), ggplotGrob(leg_surv_gg), size = "first")
}
# survival gplot objects ----
surv_layers = 1998:2009
surv_gplots = lapply(
which(daymet_years %in% surv_layers),
function(x) gplot(subset(survival_brick, x), maxpixels = maxpixels))
names(surv_gplots) = as.character(surv_layers)
# multi-year mean survivals (this takes a little time)
which(daymet_years %in% surv_layers)
surv_mean_gplots = lapply(
which(daymet_years %in% surv_layers),
function(x){
print(x)
gplot(
raster::calc(subset(survival_brick, subset = (x - lookback + 1):x), mean),
maxpixels = maxpixels)
}
)
names(surv_mean_gplots) = as.character(surv_layers)
# pine kill ggplot objects ----
pine_log_gpoint_list = list(
pine_log_gpoint(surv_panel_years[1], sz = pine_point_size),
pine_log_gpoint(surv_panel_years[2], sz = pine_point_size),
pine_log_gpoint(surv_panel_years[3], sz = pine_point_size),
pine_log_gpoint(mean_surv_panel_year, sz = pine_point_size)
)
surv_gg_list =
list(
plot_surv_gg(surv_panel_years[1], surv_gplots),
plot_surv_gg(surv_panel_years[2], surv_gplots),
plot_surv_gg(surv_panel_years[3], surv_gplots),
plot_surv_gg(mean_surv_panel_year, surv_mean_gplots)
)
surv_grob_list = lapply(1:4, function(x) ggplotGrob(surv_gg_list[[x]]))
surv_grob_list[["size"]] = "first"
surv_row = do.call(cbind, args = surv_grob_list)
# survival/kill row
pine_log_surv_gg_list_heat = lapply(1:4, function(x) surv_gg_list[[x]] + pine_log_gpoint_list[[x]] + scale_pine_heat)
pine_log_surv_gg_list_red_blue = lapply(1:4, function(x) surv_gg_list[[x]] + pine_log_gpoint_list[[x]] + scale_pine_red_blue)
pine_log_surv_grob_list_heat = lapply(1:4, function(x) ggplotGrob(pine_log_surv_gg_list_heat[[x]]))
pine_log_surv_grob_list_red_blue = lapply(1:4, function(x) ggplotGrob(pine_log_surv_gg_list_red_blue[[x]]))
pine_log_surv_grob_list_heat[["size"]] = "first"
pine_log_surv_grob_list_red_blue[["size"]] = "first"
pine_log_surv_row_red_blue = do.call(cbind, args = pine_log_surv_grob_list_red_blue)
pine_log_surv_row_heat = do.call(cbind, args = pine_log_surv_grob_list_heat)
# Complete figure  ----
dpi_adj = png_height / 72
png_height = 1600
png_aspect = 2
height_1 = 7
height_2 = 1.2
maps_red_blue = rbind(surv_row, pine_log_surv_row_red_blue, size = "first")
maps_heat = rbind(surv_row, pine_log_surv_row_heat, size = "first")
legends_heat = cbind(
ggplotGrob(leg_kill(dpi_adj * 2, dpi_adj * 1.8, scale_pine_heat)),
ggplotGrob(leg_surv(dpi_adj * 2, dpi_adj * 1.8)),
size = "first")
legends_red_blue = cbind(
ggplotGrob(leg_kill(dpi_adj * 2, dpi_adj * 1.8, scale_pine_red_blue)),
ggplotGrob(leg_surv(dpi_adj * 2, dpi_adj * 1.8)),
size = "first")
fig_heat = rbind(arrangeGrob(maps_heat), arrangeGrob(legends_heat))
fig_red_blue = rbind(arrangeGrob(maps_red_blue), arrangeGrob(legends_red_blue))
fig_heat$heights = c(unit(height_1, "npc"), unit(height_2, "npc"))
fig_red_blue$heights = c(unit(height_1, "npc"), unit(height_2, "npc"))
png("PNAS_Figures/figure_3_heat.png", width = png_aspect * png_height, height = png_height)
grid.draw(fig_heat)
dev.off()
png("PNAS_Figures/figure_3_red_blue.png", width = png_aspect * png_height, height = png_height)
grid.draw(fig_red_blue)
dev.off()
